---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import { getUser } from '../../middleware/auth';

interface Show {
  id: number;
  title: string;
  description: string | null;
  dj_name: string;
  start_time: string;
  end_time: string;
  days_of_week: string;
  image_url: string | null;
  created_at: string;
  updated_at: string;
}

interface ShowsResponse {
  shows: Show[];
}

const user = await getUser(Astro);
const isAdmin = user?.role === 'admin';

// Fetch shows
const response = await fetch(`${Astro.url.origin}/api/shows`);
const { shows } = await response.json() as ShowsResponse;
---

<DashboardLayout title="Shows Management">
  <div class="p-6">
    {isAdmin && (
      <div class="mb-6">
        <button
          id="addShowBtn"
          class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
        >
          Add New Show
        </button>
      </div>
    )}

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {shows.map((show) => (
        <div class="bg-black bg-opacity-50 rounded-lg p-4">
          <div class="aspect-video mb-4">
            <img
              src={show.image_url || '/images/general/default-show.jpg'}
              alt={show.title}
              class="w-full h-full object-cover rounded"
            >
          </div>
          
          <h3 class="text-xl font-semibold text-white mb-2">{show.title}</h3>
          <p class="text-gray-300 text-sm mb-2">with {show.dj_name}</p>
          
          <div class="space-y-1 mb-4">
            <p class="text-gray-400 text-sm">
              {show.days_of_week.split(',').join(', ')}
            </p>
            <p class="text-gray-400 text-sm">
              {show.start_time} - {show.end_time}
            </p>
          </div>
          
          {show.description && (
            <p class="text-gray-300 text-sm mb-4">{show.description}</p>
          )}
          
          {isAdmin && (
            <div class="flex space-x-2">
              <button
                class="edit-show-btn bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 transition-colors"
                data-show-id={show.id}
              >
                Edit
              </button>
              <button
                class="delete-show-btn bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 transition-colors"
                data-show-id={show.id}
              >
                Delete
              </button>
            </div>
          )}
        </div>
      ))}
    </div>
  </div>

  <!-- Add/Edit Show Modal -->
  <div id="showModal" class="fixed inset-0 bg-black bg-opacity-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-gray-900 rounded-lg max-w-md w-full p-6">
        <h2 id="modalTitle" class="text-2xl font-bold text-white mb-4">Add New Show</h2>
        
        <form id="showForm" class="space-y-4">
          <input type="hidden" id="showId" name="id">
          
          <div>
            <label class="block text-gray-300 mb-2">Title</label>
            <input 
              type="text" 
              name="title"
              required
              class="w-full px-3 py-2 bg-black bg-opacity-50 text-white rounded border border-gray-600 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
            >
          </div>
          
          <div>
            <label class="block text-gray-300 mb-2">DJ Name</label>
            <input 
              type="text" 
              name="dj_name"
              required
              class="w-full px-3 py-2 bg-black bg-opacity-50 text-white rounded border border-gray-600 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
            >
          </div>
          
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-gray-300 mb-2">Start Time</label>
              <input 
                type="time" 
                name="start_time"
                required
                class="w-full px-3 py-2 bg-black bg-opacity-50 text-white rounded border border-gray-600 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
              >
            </div>
            
            <div>
              <label class="block text-gray-300 mb-2">End Time</label>
              <input 
                type="time" 
                name="end_time"
                required
                class="w-full px-3 py-2 bg-black bg-opacity-50 text-white rounded border border-gray-600 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
              >
            </div>
          </div>
          
          <div>
            <label class="block text-gray-300 mb-2">Days of Week</label>
            <div class="grid grid-cols-7 gap-2">
              {['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'].map((day) => (
                <label class="flex items-center justify-center">
                  <input 
                    type="checkbox" 
                    name="days" 
                    value={day}
                    class="sr-only peer"
                  >
                  <span class="px-2 py-1 text-sm rounded cursor-pointer bg-gray-800 peer-checked:bg-blue-600 transition-colors">
                    {day}
                  </span>
                </label>
              ))}
            </div>
          </div>
          
          <div>
            <label class="block text-gray-300 mb-2">Description</label>
            <textarea 
              name="description"
              rows="3"
              class="w-full px-3 py-2 bg-black bg-opacity-50 text-white rounded border border-gray-600 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
            ></textarea>
          </div>
          
          <div>
            <label class="block text-gray-300 mb-2">Image URL</label>
            <input 
              type="url" 
              name="image_url"
              class="w-full px-3 py-2 bg-black bg-opacity-50 text-white rounded border border-gray-600 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
            >
          </div>
          
          <div class="flex justify-end space-x-4 mt-6">
            <button
              type="button"
              id="cancelBtn"
              class="px-4 py-2 text-gray-300 hover:text-white transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
            >
              Save Show
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  const modal = document.getElementById('showModal');
  const form = document.getElementById('showForm') as HTMLFormElement;
  const modalTitle = document.getElementById('modalTitle');
  const showIdInput = document.getElementById('showId') as HTMLInputElement;

  if (!form || !modal || !modalTitle || !showIdInput) {
    throw new Error('Required DOM elements not found');
  }
  
  // Show modal
  document.getElementById('addShowBtn')?.addEventListener('click', () => {
    modalTitle.textContent = 'Add New Show';
    form.reset();
    showIdInput.value = '';
    modal.classList.remove('hidden');
  });
  
  // Hide modal
  document.getElementById('cancelBtn')?.addEventListener('click', () => {
    modal.classList.add('hidden');
  });
  
  // Handle form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    
    // Process days of week
    const days = Array.from(formData.getAll('days'));
    formData.delete('days');
    formData.append('days_of_week', days.join(','));
    
    const showId = showIdInput.value;
    const method = showId ? 'PUT' : 'POST';
    const url = showId ? `/api/shows/${showId}` : '/api/shows';
    
    try {
      const response = await fetch(url, {
        method,
        body: formData
      });
      
      if (response.ok) {
        window.location.reload();
      } else {
        const error = await response.json() as APIError;
        alert(error.message);
      }
    } catch (error) {
      console.error('Error saving show:', error);
      alert('Failed to save show. Please try again.');
    }
  });
  
  // Edit show
  document.querySelectorAll<HTMLButtonElement>('.edit-show-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
      const showId = btn.getAttribute('data-show-id');
      if (!showId) return;
      
      try {
        const response = await fetch(`/api/shows/${showId}`);
        const { show } = await response.json() as ShowResponse;
        
        // Fill form
        showIdInput.value = String(show.id);
        (form.elements.namedItem('title') as HTMLInputElement).value = show.title;
        (form.elements.namedItem('dj_name') as HTMLInputElement).value = show.dj_name;
        (form.elements.namedItem('start_time') as HTMLInputElement).value = show.start_time;
        (form.elements.namedItem('end_time') as HTMLInputElement).value = show.end_time;
        (form.elements.namedItem('description') as HTMLTextAreaElement).value = show.description || '';
        (form.elements.namedItem('image_url') as HTMLInputElement).value = show.image_url || '';
        
        // Check days
        const days = show.days_of_week.split(',');
        form.querySelectorAll<HTMLInputElement>('[name="days"]').forEach(checkbox => {
          checkbox.checked = days.includes(checkbox.value);
        });
        
        modalTitle.textContent = 'Edit Show';
        modal.classList.remove('hidden');
      } catch (error) {
        console.error('Error fetching show:', error);
        alert('Failed to load show details. Please try again.');
      }
    });
  });
  
  // Delete show
  document.querySelectorAll<HTMLButtonElement>('.delete-show-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
      if (!confirm('Are you sure you want to delete this show?')) return;
      
      const showId = btn.getAttribute('data-show-id');
      if (!showId) return;
      
      try {
        const response = await fetch(`/api/shows/${showId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          window.location.reload();
        } else {
          const error = await response.json() as APIError;
          alert(error.message);
        }
      } catch (error) {
        console.error('Error deleting show:', error);
        alert('Failed to delete show. Please try again.');
      }
    });
  });
</script> 

<div class="mt-4">
  <p>Progress: 100%</p>
  <p>Status: Functional and on track</p>
</div>
