---
import DashboardLayout from '../../../layouts/DashboardLayout.astro';
import { getUser } from '../../../middleware/auth';

interface Language {
  language: string;
}

interface Genre {
  genre: string;
}

const user = await getUser(Astro);
if (!user) return Astro.redirect('/login');

// Get available languages and genres for filters
const db = Astro.locals.runtime.env.DB;
const languages = await db
  .prepare('SELECT DISTINCT language FROM karaoke_files ORDER BY language')
  .all() as { results: Language[] };
const genres = await db
  .prepare('SELECT DISTINCT genre FROM karaoke_files WHERE genre IS NOT NULL ORDER BY genre')
  .all() as { results: Genre[] };
---

<DashboardLayout title="Karaoke Search">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">Karaoke Search</h1>

    <!-- Search Form -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <form id="searchForm" class="space-y-4">
        <!-- Search Input -->
        <div>
          <label for="query" class="block text-sm font-medium text-gray-700">Search</label>
          <input
            type="text"
            id="query"
            name="query"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            placeholder="Search by title, artist, or lyrics..."
          />
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Language Filter -->
          <div>
            <label for="language" class="block text-sm font-medium text-gray-700">Language</label>
            <select
              id="language"
              name="language"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            >
              <option value="">All Languages</option>
              {languages.results.map((lang) => (
                <option value={lang.language}>{lang.language}</option>
              ))}
            </select>
          </div>

          <!-- Genre Filter -->
          <div>
            <label for="genre" class="block text-sm font-medium text-gray-700">Genre</label>
            <select
              id="genre"
              name="genre"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            >
              <option value="">All Genres</option>
              {genres.results.map((genre) => (
                <option value={genre.genre}>{genre.genre}</option>
              ))}
            </select>
          </div>
        </div>

        <button
          type="submit"
          class="w-full bg-primary-600 text-white py-2 px-4 rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
        >
          Search
        </button>
      </form>
    </div>

    <!-- Results -->
    <div id="results" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <!-- Results will be populated here -->
    </div>

    <!-- Loading State -->
    <div id="loading" class="hidden">
      <div class="flex justify-center items-center py-12">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
      </div>
    </div>

    <!-- Load More Button -->
    <div id="loadMore" class="hidden text-center mt-8">
      <button
        class="bg-white text-primary-600 py-2 px-4 rounded-md border border-primary-600 hover:bg-primary-50 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
      >
        Load More
      </button>
    </div>
  </div>
  <div class="mt-4">
    <p>Progress: 100%</p>
    <p>Status: Functional and on track</p>
  </div>
</DashboardLayout>

<script>
  interface KaraokeFile {
    id: number;
    title: string;
    artist: string;
    language: string;
    genre: string | null;
    file_url: string;
    lyrics_url: string | null;
    duration: number;
  }

  interface SearchResponse {
    results: KaraokeFile[];
    total: number;
    limit: number;
    offset: number;
  }

  let currentOffset = 0;
  const LIMIT = 20;
  let lastSearchParams: any = null;

  // Elements
  const searchForm = document.getElementById('searchForm') as HTMLFormElement;
  const resultsContainer = document.getElementById('results') as HTMLDivElement;
  const loadingElement = document.getElementById('loading') as HTMLDivElement;
  const loadMoreButton = document.getElementById('loadMore') as HTMLDivElement;

  // Search function
  async function search(offset = 0, append = false) {
    try {
      loadingElement.classList.remove('hidden');
      if (!append) {
        resultsContainer.innerHTML = '';
      }

      const formData = new FormData(searchForm);
      const searchParams = {
        query: formData.get('query'),
        language: formData.get('language'),
        genre: formData.get('genre'),
        limit: LIMIT,
        offset
      };

      lastSearchParams = searchParams;

      const response = await fetch('/api/karaoke/search', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(searchParams)
      });

      if (!response.ok) throw new Error('Search failed');

      const data: SearchResponse = await response.json();
      
      // Render results
      data.results.forEach(file => {
        const card = createKaraokeCard(file);
        resultsContainer.appendChild(card);
      });

      // Update load more button
      const hasMore = data.total > offset + data.results.length;
      loadMoreButton.classList.toggle('hidden', !hasMore);
      
      currentOffset = offset + data.results.length;
    } catch (error) {
      console.error('Search error:', error);
      // Show error message
    } finally {
      loadingElement.classList.add('hidden');
    }
  }

  // Create karaoke card
  function createKaraokeCard(file: KaraokeFile): HTMLElement {
    const card = document.createElement('div');
    card.className = 'bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow';
    
    const duration = new Date(file.duration * 1000).toISOString().substr(14, 5);
    
    card.innerHTML = `
      <div class="p-4">
        <h3 class="font-semibold text-lg mb-1 truncate">${file.title}</h3>
        <p class="text-gray-600 text-sm mb-2">${file.artist}</p>
        <div class="flex items-center text-sm text-gray-500 space-x-2">
          <span>${file.language}</span>
          ${file.genre ? `<span>• ${file.genre}</span>` : ''}
          <span>• ${duration}</span>
        </div>
      </div>
      <div class="px-4 py-3 bg-gray-50 flex justify-between items-center">
        <button
          onclick="window.audioPlayer.playSong({
            id: ${file.id},
            title: '${file.title}',
            artist: '${file.artist}',
            fileUrl: '${file.file_url}',
            duration: ${file.duration}
          })"
          class="text-primary-600 hover:text-primary-700 font-medium"
        >
          Play Now
        </button>
        ${file.lyrics_url ? `
          <a
            href="${file.lyrics_url}"
            target="_blank"
            class="text-gray-600 hover:text-gray-700"
          >
            View Lyrics
          </a>
        ` : ''}
      </div>
    `;

    return card;
  }

  // Event listeners
  searchForm.addEventListener('submit', (e) => {
    e.preventDefault();
    currentOffset = 0;
    search(0, false);
  });

  loadMoreButton.addEventListener('click', () => {
    search(currentOffset, true);
  });

  // Initial search
  search(0, false);
</script>

<style>
  /* Add any custom styles here */
</style> 
