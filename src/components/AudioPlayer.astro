---
interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<div class={`fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 ${className}`}>
  <div class="max-w-7xl mx-auto">
    <div class="flex items-center gap-4">
      <!-- Track Info -->
      <div class="flex-1 min-w-0">
        <div class="text-sm font-medium text-gray-900 truncate" id="track-title">No track playing</div>
        <div class="text-sm text-gray-500 truncate" id="track-artist">-</div>
      </div>

      <!-- Controls -->
      <div class="flex items-center gap-4">
        <button
          type="button"
          id="prev-track"
          class="p-2 text-gray-500 hover:text-gray-700 disabled:opacity-50"
          disabled
        >
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>

        <button
          type="button"
          id="play-pause"
          class="p-2 text-gray-500 hover:text-gray-700 disabled:opacity-50"
          disabled
        >
          <svg class="w-6 h-6 hidden" id="play-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
            />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <svg class="w-6 h-6" id="pause-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
        </button>

        <button
          type="button"
          id="next-track"
          class="p-2 text-gray-500 hover:text-gray-700 disabled:opacity-50"
          disabled
        >
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>

      <!-- Progress -->
      <div class="flex-1 flex items-center gap-2">
        <span class="text-sm text-gray-500" id="current-time">0:00</span>
        <div class="flex-1 h-2 bg-gray-200 rounded-full">
          <div class="relative w-full">
            <input
              type="range"
              id="progress"
              min="0"
              max="100"
              value="0"
              class="absolute w-full h-2 opacity-0 cursor-pointer"
            />
            <div class="h-2 bg-blue-500 rounded-full" id="progress-bar" style="width: 0%"></div>
          </div>
        </div>
        <span class="text-sm text-gray-500" id="duration">0:00</span>
      </div>

      <!-- Volume -->
      <div class="flex items-center gap-2">
        <button type="button" id="volume-btn" class="p-2 text-gray-500 hover:text-gray-700">
          <svg class="w-5 h-5" id="volume-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15.536 8.464a5 5 0 010 7.072M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C12.832 5.477 14.418 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
            />
          </svg>
        </button>
        <input
          type="range"
          id="volume"
          min="0"
          max="100"
          value="100"
          class="w-20 h-2 bg-gray-200 rounded-full appearance-none"
        />
      </div>
    </div>
  </div>

  <!-- Queue -->
  <div class="hidden absolute bottom-full left-0 right-0 bg-white border-t border-gray-200 p-4" id="queue">
    <div class="max-w-7xl mx-auto">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Queue</h3>
      <ul class="space-y-2" id="queue-list"></ul>
    </div>
  </div>

  <!-- Hidden audio element -->
  <audio id="audio-player"></audio>
</div>

<script>
  interface Song {
    id: number;
    title: string;
    artist: string;
    fileUrl: string;
    duration: number;
  }

  class AudioPlayerManager {
    private audio: HTMLAudioElement;
    private currentSong: Song | null = null;
    private queue: Song[] = [];
    private isPlaying = false;
    private elements!: {
      player: HTMLDivElement;
      playPauseBtn: HTMLButtonElement;
      playIcon: HTMLElement;
      pauseIcon: HTMLElement;
      prevBtn: HTMLButtonElement;
      nextBtn: HTMLButtonElement;
      progress: HTMLInputElement;
      progressBar: HTMLDivElement;
      currentTime: HTMLSpanElement;
      duration: HTMLSpanElement;
      volume: HTMLInputElement;
      volumeBtn: HTMLButtonElement;
      volumeIcon: HTMLElement;
      trackTitle: HTMLDivElement;
      trackArtist: HTMLDivElement;
      queueContainer: HTMLDivElement;
      queueList: HTMLUListElement;
    };

    constructor() {
      this.audio = document.getElementById('audio-player') as HTMLAudioElement;
      this.initializeElements();
      this.setupEventListeners();
    }

    private initializeElements() {
      const elements = {
        player: document.querySelector('.audio-player'),
        playPauseBtn: document.getElementById('play-pause'),
        playIcon: document.getElementById('play-icon'),
        pauseIcon: document.getElementById('pause-icon'),
        prevBtn: document.getElementById('prev-track'),
        nextBtn: document.getElementById('next-track'),
        progress: document.getElementById('progress'),
        progressBar: document.getElementById('progress-bar'),
        currentTime: document.getElementById('current-time'),
        duration: document.getElementById('duration'),
        volume: document.getElementById('volume'),
        volumeBtn: document.getElementById('volume-btn'),
        volumeIcon: document.getElementById('volume-icon'),
        trackTitle: document.getElementById('track-title'),
        trackArtist: document.getElementById('track-artist'),
        queueContainer: document.getElementById('queue'),
        queueList: document.getElementById('queue-list'),
      };

      // Validate all elements exist
      for (const [key, element] of Object.entries(elements)) {
        if (!element) {
          throw new Error(`Element ${key} not found`);
        }
      }

      // Type assertion after validation
      this.elements = elements as typeof this.elements;
    }

    private setupEventListeners() {
      // Playback controls
      this.elements.playPauseBtn.addEventListener('click', () => this.togglePlayPause());
      this.elements.prevBtn.addEventListener('click', () => this.playPrevious());
      this.elements.nextBtn.addEventListener('click', () => this.playNext());

      // Progress
      this.audio.addEventListener('timeupdate', () => this.updateProgress());
      this.elements.progress.addEventListener('input', (e) => this.seek(e));
      this.audio.addEventListener('loadedmetadata', () => this.updateDuration());

      // Volume
      this.elements.volume.addEventListener('input', (e) => this.setVolume(e));
      this.elements.volumeBtn.addEventListener('click', () => this.toggleMute());

      // Track end
      this.audio.addEventListener('ended', () => this.onTrackEnd());
    }

    public playSong(song: Song) {
      this.currentSong = song;
      this.audio.src = song.fileUrl;
      this.audio.load();
      this.audio.play();
      this.isPlaying = true;
      this.updatePlayerUI();
    }

    public addToQueue(song: Song) {
      this.queue.push(song);
      this.updateQueueUI();
      this.updateControlsState();
    }

    private togglePlayPause() {
      if (!this.currentSong) return;
      
      if (this.isPlaying) {
        this.audio.pause();
      } else {
        this.audio.play();
      }
      this.isPlaying = !this.isPlaying;
      this.updatePlayerUI();
    }

    private playPrevious() {
      // Implement previous track logic
    }

    private playNext() {
      if (this.queue.length === 0) return;
      
      const nextSong = this.queue.shift();
      if (nextSong) {
        this.playSong(nextSong);
      }
      this.updateQueueUI();
      this.updateControlsState();
    }

    private updateProgress() {
      const percent = (this.audio.currentTime / this.audio.duration) * 100;
      this.elements.progress.value = String(percent);
      this.elements.progressBar.style.width = `${percent}%`;
      this.elements.currentTime.textContent = this.formatTime(this.audio.currentTime);
    }

    private seek(e: Event) {
      const input = e.target as HTMLInputElement;
      const time = (parseFloat(input.value) / 100) * this.audio.duration;
      this.audio.currentTime = time;
    }

    private setVolume(e: Event) {
      const input = e.target as HTMLInputElement;
      const volume = parseFloat(input.value) / 100;
      this.audio.volume = volume;
      this.updateVolumeIcon(volume);
    }

    private toggleMute() {
      this.audio.muted = !this.audio.muted;
      this.updateVolumeIcon(this.audio.muted ? 0 : this.audio.volume);
    }

    private updatePlayerUI() {
      if (!this.currentSong) return;

      // Update play/pause button
      this.elements.playIcon.classList.toggle('hidden', this.isPlaying);
      this.elements.pauseIcon.classList.toggle('hidden', !this.isPlaying);

      // Update track info
      this.elements.trackTitle.textContent = this.currentSong.title;
      this.elements.trackArtist.textContent = this.currentSong.artist;

      // Update controls state
      this.updateControlsState();
    }

    private updateControlsState() {
      this.elements.prevBtn.disabled = !this.currentSong;
      this.elements.nextBtn.disabled = this.queue.length === 0;
      this.elements.playPauseBtn.disabled = !this.currentSong;
    }

    private updateQueueUI() {
      this.elements.queueList.innerHTML = '';
      this.queue.forEach((song, index) => {
        const li = document.createElement('li');
        li.className = 'flex items-center justify-between p-2 hover:bg-gray-50';
        li.innerHTML = `
          <div>
            <div class="font-medium">${song.title}</div>
            <div class="text-sm text-gray-500">${song.artist}</div>
          </div>
          <div class="text-sm text-gray-500">${this.formatTime(song.duration)}</div>
        `;
        this.elements.queueList.appendChild(li);
      });
    }

    private updateVolumeIcon(volume: number) {
      // Update volume icon based on level
      // Implement different icon states for volume levels
    }

    private formatTime(seconds: number): string {
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = Math.floor(seconds % 60);
      return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    }

    private onTrackEnd() {
      this.isPlaying = false;
      this.updatePlayerUI();
      this.playNext();
    }

    private updateDuration() {
      this.elements.duration.textContent = this.formatTime(this.audio.duration);
    }
  }

  // Initialize player
  const player = new AudioPlayerManager();

  // Expose player instance to window for external access
  (window as any).audioPlayer = player;
</script>

<style>
  /* Custom range input styling */
  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
    cursor: pointer;
  }

  input[type="range"]::-webkit-slider-runnable-track {
    background: #e5e7eb;
    height: 0.5rem;
    border-radius: 9999px;
  }

  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    margin-top: -4px;
    background-color: #3b82f6;
    height: 1rem;
    width: 1rem;
    border-radius: 50%;
  }

  input[type="range"]:focus {
    outline: none;
  }

  input[type="range"]:focus::-webkit-slider-thumb {
    border: 1px solid #3b82f6;
    outline: 3px solid #93c5fd;
    outline-offset: 0.125rem;
  }
</style> 